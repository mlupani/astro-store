---
import ProductImage from '@/components/products/ProductImage.astro';
import ProductSlideshow from '@/components/products/ProductSlideshow.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import { actions } from 'astro:actions';

const { slug }= Astro.params;

const { data: prod, error } = await actions.getProductBySlug(slug ?? '');

if(error){
    return Astro.redirect('/404');
}

const { product, images } = prod;


---

<MainLayout title="Mantenimiento de producto">
  <h1>{product.title}</h1>
  <a href="javascript:history.back()" class="text-blue-500">← Volver</a>

  <form class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <!-- Datos generales -->
    <div class="mt-2">
      <h2 class="text-lg font-semibold">Datos generales</h2>

      <input type="hidden" name="id" value={product.id}  >

      <!-- Titulo -->
      <div class="mb-4">
        <label for="title" class="block">Título</label>
        <input
          type="text"
          id="title"
          name="title"
          value={product.title}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Slug -->
      <div class="mb-4">
        <label for="slug" class="block">Slug</label>
        <input
          type="text"
          id="slug"
          name="slug"
          value={product.slug}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Descripción -->
      <div class="mb-4">
        <label for="description" class="block">Descripción</label>
        <textarea
          id="description"
          name="description"
          class="w-full p-2 border border-gray-300 rounded"
          rows="8">{product.description}</textarea
        >
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <!-- Precio -->
        <div class="mb-4">
          <label for="price" class="block">Precio</label>
          <input
            type="number"
            id="price"
            name="price"
            value={product.price}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <!-- Inventario -->
        <div class="mb-4">
          <label for="stock" class="block">Inventario</label>
          <input
            type="number"
            id="stock"
            name="stock"
            value={product.stock}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>
      </div>

      <!-- Labels -->
      <div class="mb-4">
        <label for="tags" class="block"
          >Etiquetas <small class="text-gray-500">(Separado por comas)</small
          ></label
        >
        <input
          type="text"
          id="tags"
          name="tags"
          value={product.tags}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>
      
      
      <div class="grid grid-cols-2 gap-4">
        <!-- Gender -->
        <div class="mb-4">
          <label for="gender" class="block">Sexo</label>
          <select
            class="w-full p-2 border border-gray-300 rounded"
            name="gender"
          >
            <option value="">[ Seleccione ]</option>
            {
              ['men', 'women', 'unisex', 'kid'].map((gender) => (
                <option
                  value={gender}
                  class="capitalize"
                  selected={gender === product.gender}
                >
                  {gender.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Type -->
        <div class="mb-4">
          <label for="tags" class="block">Tipo</label>
          <select class="w-full p-2 border border-gray-300 rounded" name="type">
            <option value="">[ Seleccione ]</option>
            {
              ['shirts', 'shirt', 'pants', 'hats', 'hoodies'].map((type) => (
                <option
                  value={type}
                  class="capitalize"
                  selected={type === product.type}
                >
                  {type.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- Tallas -->
      <div class="mb-4">
        <label for="sizes" class="block">Tallas</label>
        <div class="flex">
          {
            ['XS', 'S', 'M', 'L', 'XL', 'XXL'].map((size) => (
              <button type="button" class:list={[
                'btn-size',
                product.sizes.split(',').includes(size) ? 'active' : ''
              ]} onclick="this.classList.toggle('active')">{size}</button>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Imagenes -->
    <div>
      <!-- File upload -->
      <div class="mt-4">
        
         <!-- Guardar  -->
        <div class="flex justify-end">
          <button class="bg-blue-500 mb-5 p-2 rounded text-white"
            >Guardar producto</button
          >
        </div>
        
        <!-- File input -->
        <div class="flex items-center justify-center w-full">
          <label
            for="file-upload"
            class="flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100"
            id="drop-zone"
          >
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg
                class="w-8 h-8 mb-4 text-gray-500"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12"
                ></path>
              </svg>
              <p class="mb-2 text-sm text-gray-500" id="lbl-selected-files">
                <span class="font-semibold">Click aquí </span> o arrastra los archivos
              </p>
              <p class="text-xs text-gray-500">
                SVG, PNG, JPG or GIF (max. 800x400px)
              </p>
            </div>

            <!-- class="hidden" -->
            <!-- accept only images -->
            <input
              id="file-upload"
              name="imageFiles"
              type="file"
              accept="image/*"
              multiple
              hidden
            />
          </label>
        </div>

        <!-- Slideshow -->
        <ProductSlideshow images={images.map(i => i.image)} />

        <table class="w-full border">
          <thead>
            <tr>
              <th>Imagen</th>
              <th>Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              images.map(({image, id}) => (
                <tr class="border" id={id} >
                  <td class="flex justify-center">
                    <ProductImage
                      src={image}
                      alt={product.title}
                      className="w-16 h-16 rounded"
                    />
                  </td>
                  <td class="text-center">
                    <button type="button" data-image-id={id} data-image-url={image} class="btn-delete-image">X</button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>

  <style>
    .btn-size,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }
  </style>

  <script>
import { actions } from "astro:actions";
import { navigate } from "astro:transitions/client";


    document.addEventListener("astro:page-load", () => {

        const form = document.querySelector('form');
        const btnsDeleteImage =  document.querySelectorAll('.btn-delete-image');
        const dropZone = document.getElementById('drop-zone') as HTMLLabelElement;
        const lblfiles = document.getElementById('lbl-selected-files') as HTMLParagraphElement;
        const fileInput = document.getElementById('file-upload') as HTMLInputElement;

        const events = ['dragenter', 'dragover', 'dragleave', 'drop'] as const;

        if(!form) return;

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(form);

            const sizes = Array.from(document.querySelectorAll('.btn-size.active')).map((btn) => btn.textContent);
            formData.append('sizes', sizes.join(','));

            console.log(Object.fromEntries(formData.entries()));

            const { data, error} = await actions.createUpdateProduct(formData);

            if(error){
                return alert(error.message);
            }

            navigate(`/admin/products/${data.slug}`);

        });

        //delete images
        btnsDeleteImage.forEach((btn) => {
            btn.addEventListener('click', async (e) => {
                const id = btn.getAttribute('data-image-id');
                const url = btn.getAttribute('data-image-url');
                if(!id || !url) return;
                const { error} = await actions.deleteProductImage(id);

                if(error){
                    return alert(error.message);
                }

                document.getElementById(id)?.remove();
                document.getElementById(url)?.remove();
            });
        });

        //drag and drop
        events.forEach((event) => {
            dropZone.addEventListener(event, (e) => {
                e.preventDefault();
                e.stopPropagation();

                if(event === 'dragenter' || event === 'dragover'){
                    dropZone.classList.add('bg-blue-50', 'border-blue-500');
                }else{
                    dropZone.classList.remove('bg-gray-50', 'border-blue-500');

                    if(event === 'drop'){
                        const files = e.dataTransfer?.files;

                        if(files){
                          const validFiles = Array.from(files).filter((file) => {
                              const validTypes = ['image/svg+xml', 'image/png', 'image/jpeg', 'image/gif'];
                              return validTypes.includes(file.type);
                          });

                          if(validFiles.length > 0){
                              const files = new DataTransfer();
                              validFiles.forEach((file) => {
                                  files.items.add(file);
                              });
                              fileInput.files = files.files;
                          }

                          lblfiles.textContent = `${files.length} archivos seleccionados`;
                        }

                    }
                }
            });

            document.body.addEventListener(event, (e) => {
                e.preventDefault();
                e.stopPropagation();
            });

        });


    })


  </script>

</MainLayout>